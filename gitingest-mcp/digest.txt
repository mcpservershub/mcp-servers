Directory structure:
└── gitingest/
    ├── Dockerfile
    ├── config.json
    ├── pyproject.toml
    ├── script.py
    └── src/
        └── gitingest_mcp/
            ├── __init__.py
            └── server.py

================================================
File: Dockerfile
================================================

FROM cgr.dev/chainguard/wolfi-base AS dev

WORKDIR /app
RUN apk update && apk add python-3.12 py3.12-pip

COPY src/ /app/src
COPY pyproject.toml pyproject.toml
RUN python -m venv venv
ENV PATH="/app/venv/bin":$PATH

RUN pip install -e .

CMD ["gitingest"]



================================================
File: config.json
================================================
{
  "mcpServers": {
    "gitingest": {
      "command": "docker",
      "args": [
        "run",
        "-i",
        "--mount",
        "type=bind,src=/home/a0557/genval,dst=/app/genval",
        "santoshkal/gitingest-mcp:test"
      ]
    }
  }
}



================================================
File: pyproject.toml
================================================
[project]
name = "gitingest-mcp"
version = "0.1.0"
description = "Gitingest MCP server that provides prompt-friendly text ingest for LLMs"
requires-python = ">=3.12"
dependencies = [
  "gitingest>=0.1.4",
  "mcp[cli]>=1.3.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
# Tell Hatch “my importable code is under src/”
package-dir = {"" = "src"}

[tool.hatch.build.targets.wheel]
# The list of importable packages to include
packages = ["gitingest_mcp"]

[project.scripts]
# This creates a console entrypoint called `gitingest-mcp`
gitingest-mcp = "gitingest_mcp.server:main"



================================================
File: script.py
================================================
import sys
import asyncio
from gitingest import ingest_async

async def main():
    try:
        if len(sys.argv) != 4:
            raise ValueError("Usage: python script.py <path> <summary_file> <content_file>")

        path, summary_file, content_file = sys.argv[1], sys.argv[2], sys.argv[3]

        # Asynchronous ingest with error handling
        try:
            summary, _, content = await ingest_async(path)
        except Exception as e:
            raise RuntimeError(f"Failed to ingest path '{path}': {str(e)}")

        # Check for empty content
        if not content:
            raise ValueError(f"No content found in path '{path}'")

        # File writing with error handling
        try:
            with open(summary_file, 'w', encoding='utf-8') as f:
                f.write(str(summary))
            with open(content_file, 'w', encoding='utf-8') as f:
                f.write(str(content))
        except IOError as e:
            raise IOError(f"Failed to write files: {str(e)}")

        print(f"Success! Summary saved to {summary_file}, content to {content_file}")

    except Exception as e:
        print(f"Error: {str(e)}", file=sys.stderr)
        sys.exit(1)

if __name__ == '__main__':
    asyncio.run(main())



================================================
File: src/gitingest_mcp/__init__.py
================================================



================================================
File: src/gitingest_mcp/server.py
================================================
"""
FastMCP server exposing a single async tool: ingest_gitrepo.
Uses gitingest.ingest_async to fetch repo or local directory content,
and writes that content to a file.
"""

import os
# import asyncio
import logging
# from typing import Optional

from gitingest import ingest_async
from mcp.server.fastmcp import FastMCP

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s ▶ %(message)s",
)
logger = logging.getLogger(__name__)

mcp = FastMCP("GitIngestServer")


@mcp.tool()
async def ingest_gitrepo(input: str, output_file: str) -> str:
    """
    Ingests a local directory or GitHub repository and writes the content to an output file.

    Args:
        input (str): Local directory path or GitHub repository URL.
        output_file (str): Path to the file where content will be written.
        
        Raises:
        FileNotFoundError: If the input path does not exist and is not a valid URL.
        RuntimeError: If the ingestion fails.
        ValueError: If no content is returned.
        IOError: If writing to the output file fails.
    """
    if not input:
        raise ValueError("`input` must be a non-empty string")

    is_local = os.path.exists(input)
    looks_like_url = input.startswith(("http://", "https://"))
    if not (is_local or looks_like_url):
        raise FileNotFoundError(f"Input '{input}' is neither a local path nor a recognized URL")

    _, _, content = await ingest_async(input)

    if not content:
        raise ValueError(f"No content returned for '{input}'")

    out_dir = os.path.dirname(output_file) or "."
    try:
        os.makedirs(out_dir, exist_ok=True)
    except Exception as e:
        logger.exception("Could not create directory %r", out_dir)
        raise IOError(f"Unable to create directory '{out_dir}': {e}") from e

    # 4) Write content
    try:
        # 'w' will create the file if it doesn't exist, or truncate it if it does
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(content)
    except Exception as e:
        logger.exception("Failed to write content to %r", output_file)
        raise IOError(f"Failed to write to '{output_file}': {e}") from e

    logger.info("Successfully wrote content to %s", output_file)
    return content


def main():
    """
    Starts the FastMCP server on the STDIO.
    """
    logger.info("Starting FastMCP server…")
    mcp.run(transport="stdio")


if __name__ == "__main__":
    (main())


